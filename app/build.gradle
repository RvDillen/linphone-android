plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'org.jlleitschuh.gradle.ktlint' version '11.3.1'
    id 'org.jetbrains.kotlin.android'
}


// Used to set the package version name and version code
ext.versionMajor = 5
ext.versionMinor = 2
ext.versionRelease = 5

def appVersionName = "5.2.5"
def appVersionCode = 52005

static def getPackageName() {
    return "nl.clb.linphone"
}

static def getPackageNameOrg() {
    return "org.linphone"
}

static def getPackageNameTypeM() {
    return "nl.clb.typem.linphone"
}

static def getPackageNameConfig() {
    return "nl.clb.linphoneconfig"
}


def firebaseAvailable = new File(projectDir.absolutePath +'/google-services.json').exists()

def crashlyticsAvailable = new File(projectDir.absolutePath +'/google-services.json').exists() && new File(LinphoneSdkBuildDir + '/libs/').exists() && new File(LinphoneSdkBuildDir + '/libs-debug/').exists()

def extractNativeLibs = false

if (firebaseAvailable) {
    apply plugin: 'com.google.gms.google-services'
}

// Will return 502030042 for Jenkins build #42 MAX: 2100000000
def computeVersionCode() {
    // Major + minor + Jenkins build number (where available)
    return (versionMajor * 100000000) + (versionMinor * 1000000) + (versionRelease * 10000) + Integer.valueOf(System.env.BUILD_NUMBER ?: 0)
}




def gitBranch = new ByteArrayOutputStream()
task getGitVersion() {
    def versionBuild = Integer.valueOf(System.env.BUILD_NUMBER ?: 0)
    project.version = String.format('%d.%d.%d.%d', versionMajor, versionMinor, versionRelease, versionBuild)
}

configurations {
    customImplementation.extendsFrom implementation
}

task linphoneSdkSource() {
    doLast {
        configurations.customImplementation.getIncoming().each {
            it.getResolutionResult().allComponents.each {
                if (it.id.getDisplayName().contains("linphone-sdk-android")) {
                    println 'Linphone SDK used is ' + it.moduleVersion.version + ' from ' + it.properties["repositoryName"]
                }
            }
        }
    }
}

project.tasks['preBuild'].dependsOn 'getGitVersion'
project.tasks['preBuild'].dependsOn 'linphoneSdkSource'

android {
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }
    kotlinOptions {
        jvmTarget = "21"
    }
    kotlin {
        jvmToolchain(21)
    }

    compileSdkVersion 34
    defaultConfig {
        minSdkVersion 24
        //noinspection OldTargetApi
        targetSdkVersion 34
        versionCode computeVersionCode()
        versionName "${project.version}"
        applicationId getPackageName()
        multiDexEnabled true
        signingConfig signingConfigs.debug
        versionNameSuffix = 'clb'
        setProperty("archivesBaseName", applicationId + "-" + versionName)       
    }

    flavorDimensions "all"

    productFlavors {
        clb {
            dimension "all"
            applicationId getPackageName()
        }
        clbTypeM {
            dimension "all"
            applicationId getPackageNameTypeM()
        }
        clbConfig {
            dimension "all"
            applicationId getPackageNameConfig()
        }
        linphone {
            dimension "all"
            applicationId getPackageNameOrg()
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "linphone-android-${variant.getFlavorName()}-${variant.buildType.name}_${variant.versionName}.apk"
        }

        var enableFirebaseService = "false"
        if (firebaseAvailable) {
            enableFirebaseService = "true"
        }

        // See https://developer.android.com/studio/releases/gradle-plugin#3-6-0-behavior for why extractNativeLibs is set to true in debug flavor
	    // If this throws errors: ExtractNativeLibs might have to be removed!
        if (variant.buildType.name == "release" || variant.buildType.name == "releaseWithCrashlytics") {
            if (variant.getFlavorName() == "clbTypeM") {

                // Special appLabel for typeM build
                // Verify/Test on API34 device: Is it a 'problem' that the root-package-name is used instead of the actual package name for address_mime_type and file_provider?
                variant.getMergedFlavor().manifestPlaceholders = [linphone_address_mime_type: "vnd.android.cursor.item/vnd." + getPackageName() + ".provider.sip_address",
                                                                  linphone_file_provider    : getPackageName() + ".fileprovider",
                                                                  appLabel                  : "@string/app_name_typem",
                                                                  firebaseServiceEnabled    : enableFirebaseService,
                                                                  extractNativeLibs         : "false"]
            }
            else {
                variant.getMergedFlavor().manifestPlaceholders = [linphone_address_mime_type: "vnd.android.cursor.item/vnd." + getPackageName() + ".provider.sip_address",
                                                                  linphone_file_provider    : getPackageName() + ".fileprovider",
                                                                  appLabel                  : "@string/app_name",
                                                                  firebaseServiceEnabled    : enableFirebaseService,
                                                                  extractNativeLibs         : "false"]
            }
        } else {
            variant.getMergedFlavor().manifestPlaceholders = [linphone_address_mime_type: "vnd.android.cursor.item/vnd." + getPackageName() + ".provider.sip_address",
                                                              linphone_file_provider    : getPackageName() + ".debug.fileprovider",
                                                              appLabel                  : "@string/app_name_debug",
                                                              firebaseServiceEnabled    : enableFirebaseService,
                                                              extractNativeLibs         : "true" ]
        }
    }


    if (project.hasProperty('storePassword')) {
        signingConfigs {
            release {
                storeFile file(project['storeFile'])
                storePassword project['storePassword']
                keyAlias project['keyAlias']
                keyPassword project['keyPassword']
            }
        }
    }
    else {
        def keystorePropertiesFile = rootProject.file("keystore.properties")
        def keystoreProperties = new Properties()
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

        signingConfigs {
            release {
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            resValue "string", "linphone_app_branch", gitBranch.toString().trim()
            resValue "string", "sync_account_type", packageName + ".sync"
            resValue "string", "file_provider", packageName + ".fileprovider"
            resValue "string", "linphone_address_mime_type", "vnd.android.cursor.item/vnd." + packageName + ".provider.sip_address"

            if (!firebaseAvailable) {
                resValue "string", "gcm_defaultSenderId", "none"
            }

            resValue "bool", "crashlytics_enabled", "false"
        }

        releaseWithCrashlytics {
            initWith release

            resValue "bool", "crashlytics_enabled", crashlyticsAvailable.toString()

            if (crashlyticsAvailable) {
                apply plugin: 'com.google.firebase.crashlytics'

                firebaseCrashlytics {
                    nativeSymbolUploadEnabled true
                    unstrippedNativeLibsDir file(LinphoneSdkBuildDir + '/libs-debug/').toString()
                }
            }
        }

        debug {
            applicationIdSuffix ".debug"
            debuggable true
            jniDebuggable true

            resValue "string", "linphone_app_branch", gitBranch.toString().trim()
            resValue "string", "sync_account_type", packageName + ".sync"
            resValue "string", "file_provider", packageName + ".debug.fileprovider"
            resValue "string", "linphone_address_mime_type", "vnd.android.cursor.item/vnd." + packageName + ".provider.sip_address"
            resValue "bool", "crashlytics_enabled", crashlyticsAvailable.toString()

            if (!firebaseAvailable) {
                resValue "string", "gcm_defaultSenderId", "none"
            }

            if (crashlyticsAvailable) {
                apply plugin: 'com.google.firebase.crashlytics'

                firebaseCrashlytics {
                    nativeSymbolUploadEnabled false
                }
            }
        }
    }

    buildFeatures {
        dataBinding = true
    }

    namespace 'org.linphone'
    packagingOptions {
        jniLibs {
            useLegacyPackaging extractNativeLibs
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.core:core-splashscreen:1.0.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.2'
    implementation 'androidx.media:media:1.6.0'
    implementation "androidx.security:security-crypto-ktx:1.1.0-alpha06"
    implementation "androidx.window:window:1.2.0"

    def emoji_version = "1.4.0"
    implementation "androidx.emoji2:emoji2:$emoji_version"
    implementation "androidx.emoji2:emoji2-emojipicker:$emoji_version"

    def nav_version = "2.7.6"
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    implementation "androidx.slidingpanelayout:slidingpanelayout:1.2.0"
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation "androidx.gridlayout:gridlayout:1.0.0"
    implementation 'androidx.recyclerview:recyclerview:1.3.2'
    implementation 'androidx.drawerlayout:drawerlayout:1.2.0'

    // https://github.com/material-components/material-components-android/blob/master/LICENSE Apache v2.0
    implementation 'com.google.android.material:material:1.10.0'
    // https://github.com/google/flexbox-layout/blob/main/LICENSE Apache v2.0
    implementation 'com.google.android.flexbox:flexbox:3.0.0'

    // https://github.com/coil-kt/coil/blob/main/LICENSE.txt Apache v2.0
    def coil_version = "2.5.0"
    implementation("io.coil-kt:coil:$coil_version")
    implementation("io.coil-kt:coil-gif:$coil_version")
    implementation("io.coil-kt:coil-svg:$coil_version")
    implementation("io.coil-kt:coil-video:$coil_version")

    // https://github.com/Baseflow/PhotoView/blob/master/LICENSE Apache v2.0
    implementation 'com.github.chrisbanes:PhotoView:2.3.0'

    implementation platform('com.google.firebase:firebase-bom:32.5.0')
    if (crashlyticsAvailable) {
        debugImplementation 'com.google.firebase:firebase-crashlytics-ndk'
        releaseWithCrashlyticsImplementation 'com.google.firebase:firebase-crashlytics-ndk'
        releaseCompileOnly 'com.google.firebase:firebase-crashlytics-ndk'
    } else {
        compileOnly 'com.google.firebase:firebase-crashlytics-ndk'
    }
    if (firebaseAvailable) {
        implementation 'com.google.firebase:firebase-messaging'
    }

    implementation 'org.linphone:linphone-sdk-android:5.3.47'

    // Only enable leak canary prior to release
    // debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.10'
}

task generateContactsXml(type: Copy) {
    from 'contacts.xml'
    into "src/main/res/xml/"
    outputs.upToDateWhen { file('src/main/res/xml/contacts.xml').exists() }
    filter {
        line -> line
                .replaceAll('%%AUTO_GENERATED%%', 'This file has been automatically generated, do not edit or commit !')
                .replaceAll('%%PACKAGE_NAME%%', packageName)

    }
}
project.tasks['preBuild'].dependsOn 'generateContactsXml'

ktlint {
    android = true
    ignoreFailures = true
}

project.tasks['preBuild'].dependsOn 'ktlintFormat'

if (crashlyticsAvailable) {
    afterEvaluate {
        assembleReleaseWithCrashlytics.finalizedBy(uploadCrashlyticsSymbolFileReleaseWithCrashlytics)
        packageReleaseWithCrashlytics.finalizedBy(uploadCrashlyticsSymbolFileReleaseWithCrashlytics)
    }
}
